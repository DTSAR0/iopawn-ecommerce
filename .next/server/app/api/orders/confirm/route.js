(()=>{var e={};e.id=176,e.ids=[176],e.modules={3295:e=>{"use strict";e.exports=require("next/dist/server/app-render/after-task-async-storage.external.js")},4761:()=>{},10846:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},24148:(e,t,r)=>{"use strict";r.d(t,{db:()=>s});let o=require("@prisma/client"),s=global.db??new o.PrismaClient},29294:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-async-storage.external.js")},44870:e=>{"use strict";e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},63033:e=>{"use strict";e.exports=require("next/dist/server/app-render/work-unit-async-storage.external.js")},68313:()=>{},92391:(e,t,r)=>{"use strict";r.r(t),r.d(t,{patchFetch:()=>g,routeModule:()=>u,serverHooks:()=>f,workAsyncStorage:()=>l,workUnitAsyncStorage:()=>p});var o={};r.r(o),r.d(o,{POST:()=>c});var s=r(44713),d=r(18198),a=r(84557),n=r(61768),i=r(24148);async function c(e){try{let t;console.log("\uD83D\uDD04 Creating order in database and updating stock...");let{orderId:r,orderData:o}=await e.json();if(console.log("\uD83D\uDCE6 Order confirmation request:",{orderId:r}),!r)return console.log("‚ùå Missing orderId"),n.NextResponse.json({success:!1,error:"Missing orderId"},{status:400});if(!o){console.log("‚ùå Missing orderData - checking if order exists in database");let e=await i.db.order.findUnique({where:{id:r},select:{id:!0,status:!0,orderItems:!0}});if(e&&"PENDING"===e.status){console.log("‚úÖ Found existing pending order, updating to PAID");let t=await i.db.order.update({where:{id:r},data:{status:"PAID"}});for(let t of e.orderItems){let e=await i.db.product.findUnique({where:{id:t.productId},select:{stockQuantity:!0}});if(!e){console.log(`‚ùå Product ${t.productId} not found`);continue}let r=e.stockQuantity-t.quantity;r<=0?(await i.db.product.delete({where:{id:t.productId}}),console.log(`üóëÔ∏è  Product ${t.productId} deleted (stock reached 0)`)):(await i.db.product.update({where:{id:t.productId},data:{stockQuantity:r}}),console.log(`üì¶ Updated stock for product ${t.productId}: ${r}`))}return n.NextResponse.json({success:!0,orderId:t.id,status:t.status})}if(e&&"PAID"===e.status)return console.log("‚úÖ Order already confirmed"),n.NextResponse.json({success:!0,message:"Order already confirmed",orderId:e.id});return console.log("‚ùå No orderData and no existing order found"),n.NextResponse.json({success:!1,error:"Order data not found"},{status:404})}let s=await i.db.order.findUnique({where:{id:r},select:{id:!0,status:!0}});if(s){if("PAID"===s.status)return console.log("‚úÖ Order already confirmed:",r),n.NextResponse.json({success:!0,message:"Order already confirmed",orderId:s.id});if("PENDING"!==s.status)return console.log("‚ùå Order status is not PENDING:",s.status),n.NextResponse.json({success:!1,error:"Order cannot be confirmed"},{status:400});console.log("‚úÖ Order exists and eligible for confirmation")}else console.log("‚úÖ Creating new order in database");let d=o.orderItems||[];for(let e of(s?(t=await i.db.order.update({where:{id:r},data:{status:"PAID"}}),console.log("‚úÖ Updated existing order status to PAID")):(t=await i.db.order.create({data:{id:r,email:o.email,phone:o.phone,firstName:o.firstName,lastName:o.lastName,country:o.country,streetAddress:o.streetAddress,city:o.city,state:o.state,zipCode:o.zipCode,paymentMethod:"stripe",cardName:null,cardNumber:null,cardExpiry:null,cardCvc:null,orderItems:o.orderItems,totalCents:o.totalCents,status:"PAID"}}),console.log("‚úÖ Created new order in database with PAID status")),d)){let t=await i.db.product.findUnique({where:{id:e.productId},select:{stockQuantity:!0}});if(!t){console.log(`‚ùå Product ${e.productId} not found`);continue}let r=t.stockQuantity-e.quantity;console.log(`üì¶ Product ${e.productId}: ${t.stockQuantity} - ${e.quantity} = ${r}`),r<=0?(await i.db.product.delete({where:{id:e.productId}}),console.log(`üóëÔ∏è  Product ${e.productId} deleted (stock reached 0)`)):(await i.db.product.update({where:{id:e.productId},data:{stockQuantity:r}}),console.log(`üì¶ Updated stock for product ${e.productId}: ${r}`))}return console.log("‚úÖ Order confirmed and stock updated:",r),n.NextResponse.json({success:!0,orderId:t.id,status:t.status})}catch(e){return console.error("‚ùå Error confirming order:",e),n.NextResponse.json({success:!1,error:"Failed to confirm order",details:e instanceof Error?e.message:"Unknown error"},{status:500})}}let u=new s.AppRouteRouteModule({definition:{kind:d.RouteKind.APP_ROUTE,page:"/api/orders/confirm/route",pathname:"/api/orders/confirm",filename:"route",bundlePath:"app/api/orders/confirm/route"},resolvedPagePath:"/Users/dmytrotsariuk/Desktop/iopawn-ecommerce/app/api/orders/confirm/route.ts",nextConfigOutput:"",userland:o}),{workAsyncStorage:l,workUnitAsyncStorage:p,serverHooks:f}=u;function g(){return(0,a.patchFetch)({workAsyncStorage:l,workUnitAsyncStorage:p})}}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),o=t.X(0,[915,654],()=>r(92391));module.exports=o})();